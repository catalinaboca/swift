import Foundation
func citeste()->[Float]
{
print("Dati a : ")
let s_o_a=readLine()//string optional
if let s_a=s_o_a
{
  let f_o_a=Float(s_a)
  if let f_a=f_o_a
  {
    print("Dati b : ")
  let s_o_b=readLine()//string optional
  if let s_b=s_o_b
  {
    let f_o_b=Float(s_b)
    if let f_b=f_o_b
    {
    print("Dati c : ")
let s_o_c=readLine()//string optional
if let s_c=s_o_c
{
  let f_o_c=Float(s_c)
  if let f_c=f_o_c
  {
  return[f_a,f_b,f_c]

  }
  else 
  {
    //print("Nu s-a putut converti c")
    return[0,0,0]
  }
}
else 
{
  //print("Nu a citit nimic in c")
  return[0,0,0]
}
    }
    else 
    {
      //print("Nu s-a putut converti b")
      return[0,0,0]
    }
  }
  else 
  {
    //print("Nu a citit nimic in b")
    return[0,0,0]
  }
  }
  else 
  {
    //print("Nu s-a putut converti a")
    return[0,0,0]
  }
}
else 
{
  //print("Nu a citit nimic in a")
  return[0,0,0]
}
}
func calculeaza(_ coef:[Float],_ x1:inout[Float],_ x2:inout[Float])
{
  let delta=coef[1]*coef[1]-4*coef[0]*coef[2]
  if delta>=0
  {
      x1.append((-coef[1]-sqrt(delta))/(2*coef[0]))
      x2.append((-coef[1]-sqrt(delta))/(2*coef[0]))
      x1.append( 0)
      x2.append( 0)
  }
  else
  {
       x1.append((-coef[1])/(2*coef[0]))
       x2.append(coef[1]/(2*coef[0]))
       x1.append((-sqrt(-delta))/(2*coef[0]))
       x2.append(sqrt(-delta)/(2*coef[0]))
  }
}
func tipareste(_ x1:[Float],_ x2:[Float])
{
  print("x1_re=\(x1[0]) x1_im=\(x1[1]) x2_re=\(x2[0]) x2_im=\(x2[1])")
}
/*func tipareste_coeficienti(_ coef:[Float])
{
  for i in coef
  {
    print(i)
  }
}*/
/*func tipareste_coeficienti(_ coef:[Float])
{
  var i:Int=0
  while(i<3)
  {
    print(coef[i])
    i+=1
  }
}*/
func tipareste_coeficienti(_ coef:[Float])
{
  var i:Int=0
  repeat
  {
print(coef[i])
i+=1
  }while(i<3)
}
var x1=[Float]()
var x2=[Float]()
var coef=citeste()
calculeaza(coef,&x1,&x2)
tipareste(x1,x2)
